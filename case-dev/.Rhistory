results
"""
write.zoo(prices, file = 'data/prices.csv', sep = ',')
write.zoo(volume, file = 'data/volume.csv', sep = ',')
"""
# returns
allReturns(prices)
# returns
returns <- allReturns(prices)
returns <-
returns
returns
returns
# returns
returns <- annualReturn(prices)
returns
# returns
returns <- monthlyReturn(prices)
returns
# returns
returns <- monthlyReturn(prices)
returns
# returns
barChart(prices)
Delt(1, 2)
Delt(1, 0.5)
prices
RPMG3.SA
periodReturn(RPMG3.SA[, 'RMPM.SA.Adjusted'], subset=NULL, type='arithmetic', leading = TRUE)
periodReturn(RPMG3.SA[, 'RMPM.SA.Adjusted'], period = 'monthly', subset=NULL, type='arithmetic', leading = TRUE)
periodReturn(RPMG3.SA[, 'RMPM.SA.Adjusted'], period = 'daily', subset=NULL, type='arithmetic', leading = TRUE)
RPMG3.SA[, 'RMPM.SA.Adjusted']
RPMG3.SA
RPMG3.SA[, 'RPMG3.SA.Adjusted']
periodReturn(RPMG3.SA[, 'RPMG3.SA.Adjusted'], subset=NULL, type='arithmetic', leading = TRUE)
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(x[, '{x}.Adjusted'], subset=NULL, type=type, leading = TRUE)
}
# percent returns
map(accepted_ticks, ~get_returns(.x))
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(x[, glue::glue('{x}.Adjusted')], subset=NULL, type=type, leading = TRUE)
}
# percent returns
map(accepted_ticks, ~get_returns(.x))
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(x[, glue::glue('{x}.Adjusted')], subset=NULL, type=type, leading = TRUE)
}
get_returns('WEGE3.SA')
glue('{x}.Adjusted')
x <- 'WEGE3.SA'
glue('{x}.Adjusted')
WEGE3.SA
glue('{x}.Adjusted')
glue('{x}.Adjusted')
o <- glue('{x}.Adjusted')
str(o)
periodReturn(WEGE3.SA[, 'WEGE3.SA.Adjusted')], subset=NULL, type=type, leading = TRUE)
periodReturn(WEGE3.SA[, 'WEGE3.SA.Adjusted'], subset=NULL, type=type, leading = TRUE)
periodReturn(WEGE3.SA[, 'WEGE3.SA.Adjusted'], subset=NULL, type='log', leading = TRUE)
periodReturn(WEGE3.SA[, 'WEGE3.SA.Adjusted'], subset=NULL, type='arithmetic', leading = TRUE)
string(1)
character(1)
character(2)
character(6)
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(x[, character(glue('{x}.Adjusted'))], subset=NULL, type=type, leading = TRUE)
}
get_returns('WEGE3.SA')
get_returns(WEGE3.SA)
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(x[, glue('{x}.Adjusted')], subset=NULL, type=type, leading = TRUE)
}
get_returns(WEGE3.SA)
x <- WEGE3.SA
periodReturn(x[, glue('{x}.Adjusted')], subset=NULL, type='arithmetic', leading = TRUE)
glue('{x}.Adjusted')
x
x$WEGE3.SA.Adjusted
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(x[, x$WEGE3.SA.Adjusted], subset=NULL, type=type, leading = TRUE)
}
get_returns(WEGE3.SA)
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(x[, x$Adjusted], subset=NULL, type=type, leading = TRUE)
}
get_returns(WEGE3.SA)
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(x$Adjusted, subset=NULL, type=type, leading = TRUE)
}
get_returns(WEGE3.SA)
x['WEGE3.SA.Adjusted']
x[, 'WEGE3.SA.Adjusted']
x <- WEGE3.SA
x$x
accepted_ticks
as.raw ( as.hexmode ( "4e" ) )
as.raw ( as.hexmode ( "WEGE3.SA" ) )
as.raw ( as.hexmode ( "a" ) )
as.raw ( as.hexmode ( "opa" ) )
as.symbol('WEGE3.SA')
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(as.symbol(x)[, glue('{x}.Adjusted')], subset=NULL, type=type, leading = TRUE)
}
get_returns('WEGE3.SA')
as.symbol('WEGE3.SA')
as.xts('WEGE3.SA')
as.xts(WEGE3.SA)
get('WEGE3.SA')
get_returns <- function(x, type = 'arithmetic' ){
periodReturn(get(x)[, glue('{x}.Adjusted')], subset=NULL, type=type, leading = TRUE)
}
get_returns('WEGE3.SA')
# percent returns
map(accepted_ticks, ~get_returns(.x))
# percent returns
map_xts(accepted_ticks, ~get_returns(.x))
# percent returns
map_df(accepted_ticks, ~get_returns(.x))
# percent returns
a <- map_df(accepted_ticks, ~get_returns(.x))
a
str(a)
# percent returns
a <- map_dfc(accepted_ticks, ~get_returns(.x))
str(a)
# percent returns
a <- map_dfr(accepted_ticks, ~get_returns(.x))
str(a)
a
# percent returns
a <- map(accepted_ticks, ~get_returns(.x))
a
ABEV3.SA
prices
str(prices)
str(prices[0])
str(prices[,0])
str(prices[, 'WIZS3.SA'])
prices[, 'WIZS3.SA']
a
# log returns
log_returns <- map(accepted_ticks, ~get_returns(.x, 'log'))
View(log_returns)
pct_returns
get_returns <- function(x, type = 'arithmetic',  period = 'monthly'){
periodReturn(get(x)[, glue('{x}.Adjusted')], period = period, subset=NULL, type=type, leading = TRUE)
}
# percent returns
pct_returns <- map(accepted_ticks, ~get_returns(.x))
# log returns
log_returns <- map(accepted_ticks, ~get_returns(.x, 'log'))
pct_returns
map(accepted_ticks, ~get_returns(.x, period = 'yearly'))
# 10 large volume on month
list(colnames(volume))
volume[,1:]
volume
# volume
volume <- read_csv('data/volume.csv')
library(tidyverse)
# volume
volume <- read_csv('data/volume.csv')
volume
volume[:1]
volume[,1]
volume[,-1]
# 10 large volume on month
apply(volume[,-1], 1, max)
# 10 large volume on month
apply(volume[,-1],  max)
# 10 large volume on month
apply(volume[,-1], max)
# 10 large volume on month
apply(volume[,-1], 1, max)
volume
volume[,-1]
do.call(pmax, volume[,-1])
do.call(pmax, c(volume[,-1], list(na.rm=TRUE)))
# 10 large volume on month
apply(volume[,-1], 1, max(na.rm = TRUE))
# 10 large volume on month
apply(volume[,-1], 1, max, na.rm = TRUE)
#function definition
get_returns <- function(x, type = 'arithmetic',  period = 'monthly'){
periodReturn(get(x)[, glue('{x}.Adjusted')], period = period, subset=NULL, type=type, leading = TRUE)
}
# volume
volume <- read_csv('data/volume.csv')
?read_csv
# percent returns
pct_returns <- map(accepted_ticks, ~get_returns(.x))
# log returns
log_returns <- map(accepted_ticks, ~get_returns(.x, 'log'))
map(accepted_ticks, ~get_returns(.x, period = 'yearly'))
# 10 large volume on month
apply(volume[,-1], 1, max, na.rm = TRUE)
do.call(pmax, c(volume[,-1], list(na.rm=TRUE)))
as_tibble(cbind(nms = names(volume), t(volume)))
source('~/Projects/repositories/quant_finance/finance/case-dev/analysis.R')
as_tibble(cbind(nms = names(volume), t(volume)))
# 10 large volume on month
#apply(volume[,-1], 1, max, na.rm = TRUE)
volume
# 10 large volume on month
#apply(volume[,-1], 1, max, na.rm = TRUE)
volume.index
getSymbols('^BVSP', src = 'yahoo',
from='2010-12-01', to='2020-02-01',
periodicity='monthly')
# https://www.codingfinance.com/post/2018-03-27-download-price/
library(tidyquant)
library(tidyverse)
library(glue)
# https://www.codingfinance.com/post/2018-03-27-download-price/
library(tidyquant)
library(tidyverse)
library(glue)
getSymbols('^BVSP', src = 'yahoo',
from='2010-12-01', to='2020-02-01',
periodicity='monthly')
View(BVSP)
bvsp = '^BVSP'
getSymbols(bvsp, src = 'yahoo',
from='2010-12-01', to='2020-02-01',
periodicity='monthly')
df_bvsp <- map(bvsp, ~Ad(get(.x)))
df_bvsp <- reduce(df_bvsp, merge)
df_bvsp <- map(bvsp, ~Ad(get(.x)))
bvsp <- '^BVSP'
getSymbols(bvsp, src = 'yahoo',
from='2010-12-01', to='2020-02-01',
periodicity='monthly')
df_bvsp <- map(bvsp, ~Ad(get(.x)))
df_bvsp <- map(get(bvsp), ~Ad(get(.x)))
df_bvsp <- map(BVSP, ~Ad(get(.x)))
df_bvsp <- map(BVSP, ~Ad(get(.x)))
df_bvsp <- map('BVSP', ~Ad(get(.x)))
df_bvsp <- reduce(df_bvsp, merge)
df_bvsp
write.zoo(df_bvsp, file = 'data/ibov.csv', sep = ','
)
library(tidyquant)
library(tidyverse)
library(glue)
getSymbols('ITUB3.SAO', src = 'av',
from='2010-12-01', to='2020-02-01',
api.key = 'WKILRJ27Z51OABEO'
periodicity='monthly')
getSymbols('ITUB3.SAO', src = 'av',
from='2010-12-01', to='2020-02-01',
api.key = 'WKILRJ27Z51OABEO',
periodicity='monthly')
# library
# https://www.codingfinance.com/post/2018-03-27-download-price/
library(tidyquant)
library(tidyverse)
library(glue)
# read file
composition <- read_csv('data/composicao_ibx_mensal.csv')
# get unique ticks
unq_ticks <- unique(unlist(composition[-1]))
# remove na
unq_ticks <- unq_ticks[!unq_ticks %in% NA]
# put '.SA' in ticks
ticks <- map_chr(unq_ticks, ~glue::glue('{.x}.SA'))
# get data
extern_api <- function(x){
getSymbols(x, src = 'av',
from='2010-12-01', to='2020-02-01',
api.key = 'WKILRJ27Z51OABEO',
periodicity='monthly')
}
safety_api <- possibly(extern_api, otherwise = NA_real_)
# apenas ticks reconhecidos
accepted_ticks <- map_chr(ticks, safety_api)
# remove NA
accepted_ticks <- accepted_ticks[!accepted_ticks %in% NA]
# aplicando
getSymbols(accepted_ticks, src = 'av',
from='2010-12-01', to='2020-02-01',
api.key = 'WKILRJ27Z51OABEO',
periodicity='monthly')
# extract prices
prices <- map(accepted_ticks, ~Ad(get(.x)))
prices <- reduce(prices, merge)
colnames(prices) <- accepted_ticks
# extract volume
volume <- map(accepted_ticks, ~Vo(get(.x)))
volume <- reduce(volume, merge)
colnames(volume) <- accepted_ticks
# extract data of ^BVSP
getSymbols('^BVSP', src = 'av',
from='2010-12-01', to='2020-02-01',
api.key = 'WKILRJ27Z51OABEO',
periodicity='monthly')
df_bvsp <- map('BVSP', ~Ad(get(.x)))
df_bvsp <- reduce(df_bvsp, merge)
# export results
write.zoo(prices, file = 'data/prices.csv', sep = ',')
write.zoo(volume, file = 'data/volume.csv', sep = ',')
write.zoo(df_bvsp, file = 'data/ibov.csv', sep = ',')
# read file
composition <- read_csv('data/composicao_ibx_mensal.csv')
# get unique ticks
unq_ticks <- unique(unlist(composition[-1]))
# remove na
unq_ticks <- unq_ticks[!unq_ticks %in% NA]
# put '.SA' in ticks
ticks <- map_chr(unq_ticks, ~glue::glue('{.x}.SAO'))
# get data
extern_api <- function(x){
getSymbols(x, src = 'av',
from='2010-12-01', to='2020-02-01',
api.key = 'WKILRJ27Z51OABEO',
periodicity='monthly')
}
safety_api <- possibly(extern_api, otherwise = NA_real_)
# apenas ticks reconhecidos
accepted_ticks <- map_chr(ticks, safety_api)
# remove NA
accepted_ticks <- accepted_ticks[!accepted_ticks %in% NA]
accepted_ticks
composition <- read_csv('data/composicao_ibx_mensal.csv')
# get unique ticks
unq_ticks <- unique(unlist(composition[-1]))
# remove na
unq_ticks <- unq_ticks[!unq_ticks %in% NA]
# put '.SA' in ticks
ticks <- map_chr(unq_ticks, ~glue::glue('{.x}.SAO'))
# get data
extern_api <- function(x){
getSymbols(x, src = 'av',
from = as.Date('2010-12-01'),
to = as.Date('2020-02-01'),
api.key = 'WKILRJ27Z51OABEO',
periodicity='monthly')
}
safety_api <- possibly(extern_api, otherwise = NA_real_)
safety_api()
safety_api
safety_api()
ticks
1 % 5
1 %% 5
5 %% 5
5 %% 25
25 %% 5
20 %% 5
accepted_ticks
ticks[:5]
ticks[:5]
ticks[5]
ticks[,:5]
ticks[5:]
ticks[]
ticks[:]
ticks[1:5]
ticks[:5]
ticks[1:5]
count = 0
for (t in ticks[1:11]) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
ac <- c(ac, safety_api(t))
}
count = 0
ac = c()
for (t in ticks[1:11]) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
ac <- c(ac, safety_api(t))
}
ac
ticks[1:11]
get_av_stocks_data <- function(ticks){
count = 0
ac = c()
for (t in ticks) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
ac <- c(ac, safety_api(t))
}
ac
}
get_av_stocks_data(ticks[1:3])
get_av_stocks_data <- function(ticks_names){
count = 0
ac = c()
for (t in ticks_names) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
ac <- c(ac, safety_api(t))
}
ac
}
'''accepted_ticks <- map_chr(ticks, safety_api)'''
"accepted_ticks <- map_chr(ticks, safety_api)"
accepted_ticks <- map_chr(get_av_stocks_data, ticks)
accepted_ticks <- map_chr(get_av_stocks_data, ticks)
accepted_ticks <- map_chr(ticks, get_av_stocks_data)
accepted_ticks
get_av_stocks_data(ticks[1:11])
accepted_ticks <- get_av_stocks_data(ticks)
accepted_ticks
get_av_disponible_ticks <- function(ticks_names){
count = 0
ac = c()
for (t in ticks_names) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
ac <- c(ac, safety_api(t))
}
ac
}
get_av_disponible_ticks(ticks[1:50])
for (t in ticks) {}
get_av_disponible_ticks(ticks[1:15])
get_av_disponible_ticks(ticks)
get_av_stock_data <- function(ticks_names){
count = 0
ac = c()
for (t in ticks_names) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
safety_api(t)
}
}
accepted_ticks
accepted_ticks < !!
a
write_file(letters, ticks_accepted_alpha_vantage.txt')
''
write_file(letters, 'ticks_accepted_alpha_vantage.txt')
letters
write_file(letters, 'ticks_accepted_alpha_vantage.txt', sep=',')
write_csv(letters, 'ticks_accepted_alpha_vantage.txt', sep=',')
write_csv(letters, 'ticks_accepted_alpha_vantage.txt')
write.zoo(letters, file = 'data/ticks_alpha_vantage.txt', sep =',')
write.zoo(letters, file = 'data/ticks_alpha_vantage.txt')
fileConn <- file("test.out")
writeLines(c("a", "and", "book", "cat", "car", "door", "donkey", "ogre", "princess", "rain"), fileConn)
close(fileConn)
fileConn <- file("test.out")
writeLines(c("a", "and", "book", "cat", "car", "door", "donkey", "ogre", "princess", "rain"), fileConn)
close(fileConn)
read_file('test.out')
read_file('test.out', sep = '\n')
?read_file
read_delim('test.out', delim = '\n')
read_lines('test.out')
fileConn <- file("test.out")
writeLines(letters, fileConn)
close(fileConn)
# função que insere o contador para pegar os dados
get_av_disponible_ticks <- function(ticks_names){
count = 0
ac = c()
for (t in ticks_names) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
ac <- c(ac, safety_api(t))
}
file <- 'data/ticks_alpha_vantage.txt'
writeLines(ac, file)
close(file)
ac
}
# apenas ticks reconhecidos
accepted_ticks <- get_av_disponible_ticks(ticks)
accepted_ticks
get_av_disponible_ticks <- function(ticks_names){
count = 0
ac = c()
for (t in ticks_names) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
ac <- c(ac, safety_api(t))
}
ac
}
# apenas ticks reconhecidos
accepted_ticks <- get_av_disponible_ticks(ticks)
accepted_ticks
ticks
count = 0
accepted_ticks = c()
for (t in ticks) {
count <- count + 1
if (count %% 5 == 0) {
Sys.sleep(65)
}
accepted_ticks <- c(ac, safety_api(t))
}
accepted_ticks
accepted_ticks
